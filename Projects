{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "colab": {
      "name": "Copy of Capstone_Greyscale.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "VRA05cp44sgz",
        "llE-4Svf4shM",
        "yW5JSlR04shY",
        "aWz-_DNW4shh",
        "cLPRBv3F4shs",
        "o9dZXLWX4shu",
        "dTJ5s50Z4sh7",
        "TbV1Hy5W4siC",
        "Ek9CiFUM4siD",
        "fL4eN9X-4sic",
        "JWrzMVT24sip",
        "hlSN4t7G4si4",
        "ZRs-gl2t4sjJ",
        "1b6RTUkE4sjR",
        "3UW2Bhis4sjY",
        "gPtI3w1l4sjj",
        "7xvwQJmX4sjs",
        "bOYsLfY24sj2",
        "NyvTRB7g4skC",
        "XPguwomq4skI",
        "5hZmXwvq4skP",
        "jpm0ehpM4skY",
        "uQaTJ0df4skg",
        "6iXOKoe84skl",
        "Y5gnzZgK4sku",
        "m7lyvirp4sk2",
        "pWG4d5q34sk7",
        "y4orS7-o4sk8",
        "K7bymCkG4sk9",
        "33PypumK4slD",
        "PoT0Sc4s4slI",
        "zBW4NymO4slJ",
        "gIhSbERM4slO",
        "WZCdbG5H4slS",
        "7Yy-GZOf4slZ",
        "f3H5Ox364slk",
        "U_vLEiwj4slt",
        "Yolf38cJ4slz",
        "e-6bwbZ04smG",
        "4rEJNOeJ4smJ",
        "7xr1hiDN4smM",
        "GMOJVzmo4smS",
        "C7CmQBlp4smp",
        "tRSRQJ3D4smp",
        "RlgmQZUy4smv",
        "TO8G1XUo4sm0",
        "K8n7bCiA4sm2",
        "XL6GDTzO4sm7",
        "R_JJBPtr4sm9",
        "Xh87Nn9Q4snE",
        "0LCx63lV4snO",
        "8nTBjphu4snS"
      ],
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/EricaSG/Capstone/blob/master/Copy_of_Capstone_Greyscale.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "965Fsz--4sgC",
        "colab_type": "text"
      },
      "source": [
        "# 1. Business Understanding\n",
        "\n",
        "“Misdiagnosis of pneumonia will delay treatment and can result in long-term disability or death... pneumonia is misdiagnosed at an alarming rate, even among patients who are readmitted to the hospital after suffering from pneumonia in the recent past...One of the most effective ways to diagnose pneumonia is by chest x-ray. However, a chest x-ray in a person with pneumonia does not always have the characteristic “infiltrate” if it is early in the course of the illness. Sometimes, the infiltrate may be in a portion of the lung that is not easily seen by standard x-ray, and other patients may have congestive heart failure or scarring in their lungs, which can mimic pneumonia.” **This analysis aims to prove that if X-ray images are colorized, the rate of misdiagnosis (and complications associated) will decrease.**\n",
        "\n",
        "Source: https://thistlelaw.com/do-you-have-a-case-for-the-misdiagnosis-of-pneumonia/\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SmO0QNjf9oKi",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "outputId": "c84342ae-bf4d-4b6a-af65-ad09c3823108"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly&response_type=code\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pJ4tIBJg4sgD",
        "colab_type": "text"
      },
      "source": [
        "# 2. Data Understanding\n",
        "\n",
        "quick summary of data here."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8aW7hVQ64sgE",
        "colab_type": "text"
      },
      "source": [
        "# 3. Data Preparation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jDJQK8964sgF",
        "colab_type": "text"
      },
      "source": [
        "## Import Necessary Libraries"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "rTmalpRK4sgG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "import random \n",
        "from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
        "import numpy as np\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import keras\n",
        "from keras import layers\n",
        "from keras.models import Sequential\n",
        "from sklearn.model_selection import train_test_split, cross_val_predict\n",
        "from keras import regularizers\n",
        "from keras.wrappers.scikit_learn import KerasRegressor\n",
        "from keras.layers import Convolution2D, MaxPooling2D, Flatten, Dense, Dropout\n",
        "from keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "from sklearn.metrics import classification_report, confusion_matrix, mean_squared_error\n",
        "import itertools\n",
        "from keras.applications.vgg16 import preprocess_input, VGG16\n",
        "from keras.optimizers import Adam, Adadelta, Adagrad, SGD, RMSprop\n",
        "from keras import initializers\n",
        "from keras.constraints import unit_norm, min_max_norm\n",
        "from keras.applications.inception_v3 import InceptionV3"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CT-lP6fJ4sgL",
        "colab_type": "text"
      },
      "source": [
        "## Address Class Imbalance"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t7eFJEek4sgM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Use if downloading from a local machine\n",
        "# Get the Directory Path of the Train, Validation, and Test Images\n",
        "# train_dir = 'chest_xray/chest_xray/train/'\n",
        "# val_dir = 'chest_xray/chest_xray/val/'\n",
        "# test_dir = 'chest_xray/chest_xray/test/'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o-p4xB17NwLD",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "155a0bb0-c7c6-47ba-8086-8a2de2ce9488"
      },
      "source": [
        "!ls drive"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "'My Drive'  'Shared drives'\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m0PHjpMYNzE5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "8e9637fe-0691-460e-8b7c-c0ba0311a211"
      },
      "source": [
        "!ls '/content/drive/My Drive/chest_xray'"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "test  train  val\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k4u3Jg-3-9Wk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Use if downloding data from the cloud\n",
        "train_dir = '/content/drive/My Drive/chest_xray/train'\n",
        "val_dir = '/content/drive/My Drive/chest_xray/val'\n",
        "test_dir = '/content/drive/My Drive/chest_xray/test'\n"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UWXoi8ms4sgP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Establish the criteria for data augementation\n",
        "datagen = ImageDataGenerator(\n",
        "            rotation_range = 0,\n",
        "            width_shift_range = 0,\n",
        "            height_shift_range = 0,\n",
        "            rescale = None,\n",
        "            shear_range = 0,\n",
        "            zoom_range = 0,\n",
        "            horizontal_flip = False,\n",
        "            fill_mode = 'nearest')"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NBlyayCg4sgS",
        "colab_type": "text"
      },
      "source": [
        "### Increase Normal Images to 5600"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dfq0RaqT4sgT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Select a random normal image to duplicate. Put the image path into load_img\n",
        "norm_img = load_img('/content/drive/My Drive/chest_xray/train/NORMAL/IM-0115-0001.jpeg')"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uVvozKDF4sgX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e4e14875-42e4-4ec6-aac4-9ab2fea8fe0c"
      },
      "source": [
        "# Get the size of the image\n",
        "norm_img.getpixel"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method Image.getpixel of <PIL.Image.Image image mode=RGB size=2090x1858 at 0x7F6A02EBF828>>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WxWzL70G4sga",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Convert the image to an array\n",
        "norm_img_array = img_to_array(norm_img)"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tywuAJW_4sgd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "e691eca6-43d9-4016-cb42-fd716947db23"
      },
      "source": [
        "norm_img_array.shape"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1858, 2090, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bp1BbbzV4sgh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "30685405-e001-4b34-e92a-29029a7febff"
      },
      "source": [
        "norm_img_array = norm_img_array.reshape((1,) + norm_img_array.shape)\n",
        "norm_img_array.shape"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 1858, 2090, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hpl37N204sgq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# List directory where images will be stored\n",
        "norm_dir = '/content/drive/My Drive/chest_xray/train/NORMAL/'"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bzxyFsjy4sgt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "631d7e54-0460-496c-980a-0e3f68d1ade4"
      },
      "source": [
        "# Add 4259 Images to Normal\n",
        "count = 0\n",
        "for batch in datagen.flow(norm_img_array, batch_size=30, save_to_dir=norm_dir, save_prefix='IM', save_format='jpeg'):\n",
        "    count +=1\n",
        "    if count == 317:\n",
        "        break\n",
        "print('4259 images have been generated at', norm_dir)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "4259 images have been generated at /content/drive/My Drive/chest_xray/train/NORMAL/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZafdQnc44sgx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# count = 0\n",
        "# for batch in datagen.flow(norm_img_array, batch_size=, save_to_dir=norm_dir, save_prefix='IM', save_format='jpeg'):\n",
        "#     count +=1\n",
        "#     if count == :\n",
        "#         break\n",
        "# print(' images have been generated at', norm_dir)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VRA05cp44sgz",
        "colab_type": "text"
      },
      "source": [
        "### Increase Pneumonia Images to 5600"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o954SWwP4sg0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Select a random pneumonia image to duplicate\n",
        "pneum_img = load_img('/content/drive/My Drive/chest_xray/train/PNEUMONIA/person23_bacteria_92.jpeg')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0AFFzVph4sg2",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d0de3652-5dbb-45cd-97d4-eacb9b24fada"
      },
      "source": [
        "pneum_img.getpixel"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method Image.getpixel of <PIL.Image.Image image mode=RGB size=1080x712 at 0x7FE44F986DD8>>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H4utw_Vp4sg5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pneum_img_array = img_to_array(pneum_img)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4MnXMYza4sg8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "87f98808-6dcf-4941-dd50-f4276e721e73"
      },
      "source": [
        "pneum_img_array.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(712, 1080, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UqL1WMm64shB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "b313e2c5-d28e-47c8-a884-3ecf7f90be2f"
      },
      "source": [
        "# Reshape the array to a (1 x n) array\n",
        "pneum_img_array = pneum_img_array.reshape((1,) + pneum_img_array.shape)\n",
        "pneum_img_array.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 712, 1080, 3)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uigvlfzQ4shE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# List directory where images will be stored\n",
        "pneum_dir = '/content/drive/My Drive/chest_xray/train/PNEUMONIA/'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UbahPmZI4shH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "438af434-ff86-4650-d6c8-16166dc17a6b"
      },
      "source": [
        "count = 0\n",
        "for batch in datagen.flow(pneum_img_array, batch_size=30, save_to_dir=pneum_dir, save_prefix='IM', save_format='jpeg'):\n",
        "    count +=1\n",
        "    if count == 317:\n",
        "        break\n",
        "print('1725 additional images have been generated at', pneum_dir)\n",
        "    "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1725 additional images have been generated at /content/drive/My Drive/chest_xray/train/PNEUMONIA/\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z_s8fGV84shJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# count = 0\n",
        "# for batch in datagen.flow(pneum_img_array, batch_size=100, save_to_dir=pneum_dir, save_prefix='IM', save_format='jpeg'):\n",
        "#     count +=1\n",
        "#     if count == 800:\n",
        "#         break\n",
        "# print('800 additional images have been generated at', pneum_dir)\n",
        "    "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bCXhf5N74shL",
        "colab_type": "text"
      },
      "source": [
        "## Preprocessing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "llE-4Svf4shM",
        "colab_type": "text"
      },
      "source": [
        "### Read in & Normalize Images"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uw5RreHx4shN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "df89f9e9-7ae9-4590-d1e4-cd31933c9e16"
      },
      "source": [
        "# Resize all 11,200 images in the train directory\n",
        "train_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(train_dir,\n",
        "                                                     target_size=(96,96), batch_size=11200, color_mode='grayscale')"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 15764 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "11NMjNDB4shP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0edc0e8e-ade9-4353-ebce-7ba411d117c5"
      },
      "source": [
        "# Resize all 16 images in the train directory\n",
        "val_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(val_dir,\n",
        "                                                   target_size=(96,96), batch_size=16, color_mode='grayscale')\n"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 16 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "foKUIMJI4shU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "0555aed8-8faf-4d87-f1fe-7fc06b824306"
      },
      "source": [
        "# Resize all 624 images in the test directory\n",
        "test_generator = ImageDataGenerator(rescale=1./255).flow_from_directory(test_dir,\n",
        "                                                   target_size=(96,96), batch_size=624, color_mode='grayscale')\n",
        "\n"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 624 images belonging to 2 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yW5JSlR04shY",
        "colab_type": "text"
      },
      "source": [
        "### Generate Image and Label Sets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tnxo4_I74shY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Iterate through all of the images and create image-label datasets\n",
        "train_images, train_labels = next(train_generator)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DwXODYcc4shb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "val_images, val_labels = next(val_generator)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CovVIVWp4she",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_images, test_labels = next(test_generator)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "50KsxQWTnOqk",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "14523bf1-4acc-405f-ddce-c092a0c13769"
      },
      "source": [
        "# Recheck for Class Imbalance\n",
        "u = np.unique(train_labels, return_counts=True)\n",
        "np.asarray(u).T\n",
        "u"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0., 1.], dtype=float32), array([11200, 11200]))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aWz-_DNW4shh",
        "colab_type": "text"
      },
      "source": [
        "### Preview Images"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s4dWkFDF4shi",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113
        },
        "outputId": "2eb2b08a-9d6d-4093-9ef2-e1ace1fcbdf2"
      },
      "source": [
        "# Train\n",
        "array_to_img(train_images[1000])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=96x96 at 0x7FF50A353828>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qTPwuJg44shl",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113
        },
        "outputId": "2d722afe-f106-4471-f8b8-7f787f14ee82"
      },
      "source": [
        "# Validation\n",
        "array_to_img(val_images[8])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=96x96 at 0x7FF50A3530F0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "FS0ZvLTl4shq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113
        },
        "outputId": "26658643-d8aa-46b1-d10c-327072ba4a9d"
      },
      "source": [
        "# Test\n",
        "array_to_img(test_images[500])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=96x96 at 0x7FF50A353208>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cLPRBv3F4shs",
        "colab_type": "text"
      },
      "source": [
        "### Check the Shape of the Image & Label Arrays"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "evaCYQJj4shs",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        },
        "outputId": "76939ba4-a8d4-4776-a86a-cec9f7f37ba5"
      },
      "source": [
        "print('Shape of Train Images: ', np.shape(train_images))\n",
        "print('Shape of Train Labels: ', np.shape(train_labels))\n",
        "print('Shape of Validation Images: ', np.shape(val_images))\n",
        "print('Shape of Validation Labels: ', np.shape(val_labels))\n",
        "print('Shape of Test Images: ', np.shape(test_images))\n",
        "print('Shape of Test Labels: ', np.shape(test_labels))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shape of Train Images:  (11200, 96, 96, 1)\n",
            "Shape of Train Labels:  (11200, 2)\n",
            "Shape of Validation Images:  (16, 96, 96, 1)\n",
            "Shape of Validation Labels:  (16, 2)\n",
            "Shape of Test Images:  (624, 96, 96, 1)\n",
            "Shape of Test Labels:  (624, 2)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o9dZXLWX4shu",
        "colab_type": "text"
      },
      "source": [
        "### Transform the labels to (m X 1) matrices"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O87buuPX4shv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "b0e68f14-d564-412c-b133-977ba83da1bc"
      },
      "source": [
        "train_labels_final = np.reshape(train_labels[:,0], (11200,1))\n",
        "np.shape(train_labels_final)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(11200, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0qf5qcUJ4sh1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "b84b5669-d6be-4201-b246-32c864625eb5"
      },
      "source": [
        "val_labels_final = np.reshape(val_labels[:,0], (16,1))\n",
        "np.shape(val_labels_final)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(16, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i30mOhCH4sh3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "107e5725-f57f-4399-87f1-278c983f81d1"
      },
      "source": [
        "test_labels_final = np.reshape(test_labels[:,0], (624,1))\n",
        "np.shape(test_labels_final)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(624, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dTJ5s50Z4sh7",
        "colab_type": "text"
      },
      "source": [
        "### Verify the Images and Labels"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VSzWjKL94sh7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "be8529e7-3425-403a-e721-d6f0b3509c78"
      },
      "source": [
        "# Verify the class labels\n",
        "train_generator.class_indices"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'NORMAL': 0, 'PNEUMONIA': 1}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7iLJdsXO4sh9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113
        },
        "outputId": "21c24a46-67d2-491b-f28e-16125f78ec14"
      },
      "source": [
        "# Select a random image to verify\n",
        "array_to_img(train_images[7000])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<PIL.Image.Image image mode=L size=96x96 at 0x7FF50A353278>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hcincRra4siA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "a9b1ce9a-f129-4681-c123-9e3aa3b833f1"
      },
      "source": [
        "# Return the respective label and verify that the label matches the image\n",
        "train_labels_final[7000, :]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.], dtype=float32)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ME5BjSbJ4siC",
        "colab_type": "text"
      },
      "source": [
        "# 4. Modeling\n",
        "Start with Greyscale, goal accuracy 80%"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TbV1Hy5W4siC",
        "colab_type": "text"
      },
      "source": [
        "## Building the Convolutional Nerual Network"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ek9CiFUM4siD",
        "colab_type": "text"
      },
      "source": [
        "### Model 1: Default Settings w/ Early Stopping"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eGMaV71V4siD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "\n",
        "model1 = Sequential()\n",
        "\n",
        "model1.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(96, 96, 1)))\n",
        "model1.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model1.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "model1.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model1.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model1.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model1.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model1.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "model1.add(layers.Flatten())\n",
        "model1.add(layers.Dense(512, activation = 'relu'))\n",
        "model1.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W8a-TwH14siH",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        },
        "outputId": "a991b99a-2397-4606-9dfd-f94578487423"
      },
      "source": [
        "# Return the summary of the model\n",
        "model1.summary()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 94, 94, 32)        320       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 47, 47, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 44, 44, 64)        32832     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 22, 22, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 20, 20, 128)       73856     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 10, 10, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 8, 8, 128)         147584    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 4, 4, 128)         0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 2048)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 512)               1049088   \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 513       \n",
            "=================================================================\n",
            "Total params: 1,304,193\n",
            "Trainable params: 1,304,193\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8iT0b9EO4siK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Compile the model\n",
        "model1.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5C5fTqre4siN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Execute \"early stopping\" to stop the model when the loss has stopped improving\n",
        "early_stopping = [EarlyStopping(monitor='val_loss', patience=10), \n",
        "                  ModelCheckpoint(filepath='model1_default.h5', monitor='val_accuracy', save_best_only=True)]"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_uj1kaLP4siP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "outputId": "37cdc886-fc74-462c-eb0f-298b577e498c"
      },
      "source": [
        "results1 = model1.fit(train_images, train_labels_final, epochs=100, callbacks=early_stopping, batch_size=750, validation_data=(val_images, val_labels_final))"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-0bec463705a9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mresults1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_images\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_labels_final\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mearly_stopping\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m750\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_images\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval_labels_final\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'train_images' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fL4eN9X-4sic",
        "colab_type": "text"
      },
      "source": [
        "### Evaluation: Model 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "I77Jo8_k4sid",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "7b1cc587-75aa-4b7c-a9e8-5848048ba70e"
      },
      "source": [
        "results_train1 = model1.evaluate(train_images, train_labels_final)\n",
        "results_train1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "350/350 [==============================] - 60s 172ms/step - loss: 0.0012 - accuracy: 1.0000\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.0012208682019263506, 1.0]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bw8lbT4R4sii",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "0e9f708c-7a0a-4015-e49d-1801ac3d7886"
      },
      "source": [
        "results_val1 = model1.evaluate(val_images, val_labels_final)\n",
        "results_val1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1/1 [==============================] - 0s 1ms/step - loss: 0.5792 - accuracy: 0.8125\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.5792428255081177, 0.8125]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6EGwfoFw4sik",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def visualize_training_results(results):\n",
        "    \"\"\"\n",
        "   1 Input: The Training and \n",
        "    Validation/Testing Dictionary \n",
        "    of Loss and Accuracy\n",
        "    \n",
        "    Output: 2 Plots of Loss vs. Epochs\n",
        "    and Accuracy vs. Epochs\n",
        "    \"\"\"\n",
        "    history = results.history\n",
        "    plt.figure()\n",
        "    plt.plot(history['val_loss'])\n",
        "    plt.plot(history['loss'])\n",
        "    plt.legend(['Validation Loss', 'Training Loss'])\n",
        "    plt.title('Loss')\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.show()\n",
        "    \n",
        "    plt.figure()\n",
        "    plt.plot(history['val_acc'])\n",
        "    plt.plot(history['acc'])\n",
        "    plt.legend(['Validation Accuracy', 'Training Accuracy'])\n",
        "    plt.title('Accuracy')\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fmiprjVV4sim",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "outputId": "783d70e4-f3f9-4538-89cd-f40f4229187d"
      },
      "source": [
        "visualize_training_results(results1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-29-58ece5309870>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mvisualize_training_results\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresults1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'results1' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f-AP3Bfq4sio",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JWrzMVT24sip",
        "colab_type": "text"
      },
      "source": [
        "### Predictions and Metrics"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mwazk6V84sip",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Make Predictions\n",
        "preds1 = model1.predict(val_images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MDJqghU_Zpvz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions1 = preds1 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qXCcvFNR4siu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Print the classification report showing the metrics Recall, Precision, and F1-Score\n",
        "classification_report = classification_report(val_labels_final, predictions1)\n",
        "classification_report"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nYpIRwfa4si0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Plot a confusion matrix\n",
        "def plot_confusion_matrix(labels, preds):\n",
        "    \"\"\"\n",
        "    Input: Validation/Testing Labels and\n",
        "    model predictions\n",
        "    \n",
        "    Output: A confusion matrix\n",
        "    \n",
        "    \"\"\"\n",
        "    \n",
        "    cnf_matrix = confusion_matrix(labels, preds)\n",
        "\n",
        "    # Create the basic confusion matrix\n",
        "    plt.imshow(cnf_matrix,  cmap=plt.cm.Blues) \n",
        "\n",
        "    # Add title and axis labels\n",
        "    plt.title('Confusion Matrix')\n",
        "    plt.ylabel('True label')\n",
        "    plt.xlabel('Predicted label')\n",
        "\n",
        "    # Add appropriate axis scales\n",
        "    y = train_generator.class_indices\n",
        "    class_names = set(y) # Get class labels to add to matrix\n",
        "    tick_marks = np.arange(len(class_names))\n",
        "    plt.xticks(tick_marks, class_names, rotation=45)\n",
        "    plt.yticks(tick_marks, class_names)\n",
        "\n",
        "    # Add labels to each cell\n",
        "    thresh = cnf_matrix.max() / 2. # Used for text coloring below\n",
        "    # Here we iterate through the confusion matrix and append labels to our visualization \n",
        "    for i, j in itertools.product(range(cnf_matrix.shape[0]), range(cnf_matrix.shape[1])):\n",
        "            plt.text(j, i, cnf_matrix[i, j],\n",
        "                     horizontalalignment='center',\n",
        "                     color='white' if cnf_matrix[i, j] > thresh else 'black')\n",
        "\n",
        "    # Add a legend\n",
        "    plt.colorbar()\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NAlkUCEu4si2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(val_labels_final, predictions1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hlSN4t7G4si4",
        "colab_type": "text"
      },
      "source": [
        "## Model 2: Add L2 Regularizer. Increase Batch Size to 1000"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UO5VJIqQ4si5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "\n",
        "model2 = Sequential()\n",
        "\n",
        "model2.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(96, 96, 1)))\n",
        "model2.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model2.add(layers.Conv2D(64, (4, 4), activation='relu', kernel_regularizer=regularizers.l2(l=0.01)))\n",
        "model2.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model2.add(layers.Conv2D(128, (3, 3), activation='relu', kernel_regularizer=regularizers.l2(l=0.01)))\n",
        "model2.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model2.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model2.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "model2.add(layers.Flatten())\n",
        "model2.add(layers.Dense(512, activation = 'relu', kernel_regularizer=regularizers.l2(l=0.01)))\n",
        "model2.add(layers.Dense(1, activation='sigmoid'))\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LfAuNB9J4si9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        },
        "outputId": "f0bf544b-d257-43a3-b162-01f11e26cef6"
      },
      "source": [
        "model2.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d (Conv2D)              (None, 94, 94, 32)        320       \n",
            "_________________________________________________________________\n",
            "max_pooling2d (MaxPooling2D) (None, 47, 47, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_1 (Conv2D)            (None, 44, 44, 64)        32832     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_1 (MaxPooling2 (None, 22, 22, 64)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_2 (Conv2D)            (None, 20, 20, 128)       73856     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_2 (MaxPooling2 (None, 10, 10, 128)       0         \n",
            "_________________________________________________________________\n",
            "conv2d_3 (Conv2D)            (None, 8, 8, 128)         147584    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_3 (MaxPooling2 (None, 4, 4, 128)         0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 2048)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 512)               1049088   \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 513       \n",
            "=================================================================\n",
            "Total params: 1,304,193\n",
            "Trainable params: 1,304,193\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IUJ0LZC84si_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model2.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p5uawbaiermn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='model2_l2.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "KuwV8zi24sjB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 207
        },
        "outputId": "935d85a3-30af-4425-8007-880f0555a917"
      },
      "source": [
        "results2 = model2.fit(train_images, train_labels_final, epochs=15, batch_size=1000, callbacks=save_model, validation_data=(val_images, val_labels_final))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/15\n",
            "12/12 [==============================] - 189s 16s/step - loss: 7.2452 - accuracy: 0.6625 - val_loss: 4.7081 - val_accuracy: 0.6875\n",
            "Epoch 2/15\n",
            "12/12 [==============================] - 188s 16s/step - loss: 3.4782 - accuracy: 0.8186 - val_loss: 2.5711 - val_accuracy: 0.7500\n",
            "Epoch 3/15\n",
            "12/12 [==============================] - 190s 16s/step - loss: 1.6927 - accuracy: 0.9363 - val_loss: 1.9954 - val_accuracy: 0.6875\n",
            "Epoch 4/15\n",
            "12/12 [==============================] - 192s 16s/step - loss: 0.9792 - accuracy: 0.9514 - val_loss: 1.2943 - val_accuracy: 0.7500\n",
            "Epoch 5/15\n",
            "10/12 [========================>.....] - ETA: 33s - loss: 0.6666 - accuracy: 0.9628"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZRs-gl2t4sjJ",
        "colab_type": "text"
      },
      "source": [
        "### Evaluation: Model 2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qtatMHvF4sjK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Training Results\n",
        "model2.evaluate(train_images, train_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8kA3Oeg74sjN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Validation Results\n",
        "model2.evaluate(val_images, val_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "llkcTdee4sjP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(results2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-1SPCwnp4sjQ",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1b6RTUkE4sjR",
        "colab_type": "text"
      },
      "source": [
        "### Predictions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5cd-mYGV4sjR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "preds2 = model2.predict(val_images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QqtKZ1HFadRy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions2 = preds2 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kT0N47lM4sjU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Print the classification report showing the metrics Recall, Precision, and F1-Score\n",
        "classification_report = classification_report(val_labels_final, predictions2)\n",
        "classification_report\n",
        "# Troubleshoot Error"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Go0h2KZa4sjV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(val_labels_final, predictions2)\n",
        "# Troubleshoot Error"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3UW2Bhis4sjY",
        "colab_type": "text"
      },
      "source": [
        "## Model 3: Weight Initialization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pxZVU_EL4sjY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "\n",
        "model3 = Sequential()\n",
        "\n",
        "model3.add(layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', input_shape=(96, 96, 1)))\n",
        "model3.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model3.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "model3.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model3.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model3.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model3.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model3.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "model3.add(layers.Flatten())\n",
        "model3.add(layers.Dense(512, activation = 'relu'))\n",
        "model3.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "11mL6bjV4sja",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model3.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mzdTU-6S4sjc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model3.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GCodk6W7fHvK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='model3_weightinit.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P07TYpMb4sje",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "results3 = model3.fit(train_images, train_labels_final, epochs=15, batch_size=1000, callbacks=save_model, validation_data=(val_images, val_labels_final))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gPtI3w1l4sjj",
        "colab_type": "text"
      },
      "source": [
        "### Evaluation: Model 3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O0jT9g0H4sjj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Training Results\n",
        "model3.evaluate(train_images, train_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TGY0uof64sjl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Validation Results\n",
        "model3.evaluate(val_images, val_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eYpB9ruD4sjo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(results3)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oO0RJ0y34sjs",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7xvwQJmX4sjs",
        "colab_type": "text"
      },
      "source": [
        "### Predictions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "suCWgFDX4sjs",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "preds3 = model3.predict(val_images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AyZVeHDNdLgn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions3 = preds3 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ypjCISpf4sjw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Print the classification report showing the metrics Recall, Precision, and F1-Score\n",
        "classification_report = classification_report(val_labels_final, predictions3)\n",
        "classification_report\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dn_F-vos4sjy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(val_labels_final, predictions3)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BtyF518g4sjz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LQmiQHLz4sj1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bOYsLfY24sj2",
        "colab_type": "text"
      },
      "source": [
        "## Model 4: Dropout Regularization\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hsY0ZIGz4sj3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "\n",
        "model4 = Sequential()\n",
        "\n",
        "model4.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(96, 96, 1)))\n",
        "model4.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model4.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "model4.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model4.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model4.add(layers.MaxPooling2D((2,2)))\n",
        "model4.add(Dropout(0.4))\n",
        "\n",
        "model4.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model4.add(layers.MaxPooling2D((2,2)))\n",
        "model4.add(Dropout(0.4))\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "model4.add(layers.Flatten())\n",
        "model4.add(layers.Dense(512, activation = 'relu'))\n",
        "model4.add(Dropout(0.2))\n",
        "model4.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PymCSowM4sj4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model4.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qr5oYppZfXI2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='model4_dropout.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "1kIjCIIp4sj7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "results4 = model4.fit(train_images, train_labels_final, epochs=15, batch_size=1000, callbacks=save_model, validation_data=(val_images, val_labels_final))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NyvTRB7g4skC",
        "colab_type": "text"
      },
      "source": [
        "### Evaluation: Model 4"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xKrxrayU4skC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model4.evaluate(train_images, train_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MebGZ3Vc4skE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model4.evaluate(val_images, val_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o_4500Y74skH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(results4)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j66lIsth4skI",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XPguwomq4skI",
        "colab_type": "text"
      },
      "source": [
        "### Predictions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_fPBabiw4skJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "preds4 = model4.predict(val_images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qg5Pkd-oeILV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions4 = preds4 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lb6I98_34skK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Print the classification report showing the metrics Recall, Precision, and F1-Score\n",
        "classification_report = classification_report(val_labels_final, predictions4)\n",
        "classification_report\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XdM2bPUy4skM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(val_labels_final, predictions4)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oz1U4LGp4skO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5hZmXwvq4skP",
        "colab_type": "text"
      },
      "source": [
        "## Model 5: Weight Constraint, unit_norm"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rxd188zh4skP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "model5 = Sequential()\n",
        "\n",
        "model5.add(layers.Conv2D(32, (3, 3), activation='relu', kernel_constraint=unit_norm(), input_shape=(96, 96, 1)))\n",
        "model5.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model5.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "model5.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model5.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model5.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "\n",
        "model5.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model5.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "model5.add(layers.Flatten())\n",
        "model5.add(layers.Dense(512, activation = 'relu'))\n",
        "model5.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "68apZ3kC4skS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model5.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f-hAI0oRgnvf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='model5_unitnorm.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "FYgwxUhW4skT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "results5 = model5.fit(train_images, train_labels_final, epochs=15, batch_size=1000, callbacks=save_model, validation_data=(val_images, val_labels_final))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jpm0ehpM4skY",
        "colab_type": "text"
      },
      "source": [
        "### Evaluation: Model 5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B_BP_rpn4skY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model5.evaluate(train_images, train_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ywOGslVM4skb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model5.evaluate(val_images, val_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P1fdReml4ske",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(results5)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aCVN509Y4skf",
        "colab_type": "text"
      },
      "source": [
        "**Observation:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uQaTJ0df4skg",
        "colab_type": "text"
      },
      "source": [
        "### Predictions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "92CB6wL-4skg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "preds5 = model5.predict(val_images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jhl7u4yiiQpV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions5 = preds5 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hQAt-Joh4skh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Print the classification report showing the metrics Recall, Precision, and F1-Score\n",
        "classification_report = classification_report(val_labels_final, predictions5)\n",
        "classification_report\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EzqLSkV-4ski",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(val_labels_final, predictions5)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_DzoNu714skk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6iXOKoe84skl",
        "colab_type": "text"
      },
      "source": [
        "## Model 6: Weight Constraints, Min-Max Value [0.5,  2]"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "miHKLFKn4skm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "model6 = Sequential()\n",
        "\n",
        "model6.add(layers.Conv2D(32, (3, 3), activation='relu', kernel_constraint=min_max_norm(min_value=0.5, max_value=2.0), input_shape=(96, 96, 1)))\n",
        "model6.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model6.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "model6.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model6.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model6.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "\n",
        "model6.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model6.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "model6.add(layers.Flatten())\n",
        "model6.add(layers.Dense(512, activation = 'relu'))\n",
        "model6.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "JI7g2Lu84skn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model6.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r7gwStUN4skp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model6.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h8gS5tYyisEg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='model6_minmax.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M_AyQF7J4skq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "results6 = model6.fit(train_images, train_labels_final, epochs=15, batch_size=1000, callbacks = save_model, validation_data=(val_images, val_labels_final))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y5gnzZgK4sku",
        "colab_type": "text"
      },
      "source": [
        "### Evaluation: Model 6"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oKHXEVjv4skv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model6.evaluate(train_images, train_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c3sYdAip4skx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model6.evaluate(val_images, val_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b3T2Q_9o4skz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(results6)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2tJ8ZZs64sk2",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m7lyvirp4sk2",
        "colab_type": "text"
      },
      "source": [
        "### Predictions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cqkrunOq4sk3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "preds6 = model6.predict(val_images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eRgsK5Ani93_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions6 = preds6 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tO4XHJKi4sk4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Print the classification report showing the metrics Recall, Precision, and F1-Score\n",
        "classification_report = classification_report(val_labels_final, predictions6)\n",
        "classification_report\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "155EV9FU4sk5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(val_labels_final, predictions6)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "50A9z26L4sk6",
        "colab_type": "text"
      },
      "source": [
        "# Increase Testing Accuracy by Adding 4000 Training Images "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pWG4d5q34sk7",
        "colab_type": "text"
      },
      "source": [
        "## Add 2000 Normal Images"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ws-Z_6B14sk7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "count = 0\n",
        "for batch in datagen.flow(norm_img_array, batch_size=100, save_to_dir=norm_dir, save_prefix='IM', save_format='jpeg'):\n",
        "    count +=1\n",
        "    if count == 500:\n",
        "        break\n",
        "print('2000 images have been generated at', norm_dir)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y4orS7-o4sk8",
        "colab_type": "text"
      },
      "source": [
        "## Add 2000 Pneumonia Images"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q5x4NorL4sk8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "count = 0\n",
        "for batch in datagen.flow(pneum_img_array, batch_size=50, save_to_dir=pneum_dir, save_prefix='IM', save_format='jpeg'):\n",
        "    count +=1\n",
        "    if count == 200:\n",
        "        break\n",
        "print('2000 additional images have been generated at', pneum_dir)\n",
        "    "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K7bymCkG4sk9",
        "colab_type": "text"
      },
      "source": [
        "## Preprocessing: Part 2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cFkibOOj4sk9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Resize all 15,200 images in the train directory\n",
        "# Use default color mode so the image arrays have 3 channels (n x m x 3) as required for Pretrained Models\n",
        "train_gen = ImageDataGenerator(rescale=1./255).flow_from_directory(train_dir,\n",
        "                                                     target_size=(96,96), batch_size=15200)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XqJIMTFk4sk-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Resize all 16 images in the train directory\n",
        "val_gen = ImageDataGenerator(rescale=1./255).flow_from_directory(val_dir,\n",
        "                                                   target_size=(96,96), batch_size=16)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bY5q8xpS4slA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Resize all 624 images in the train directory\n",
        "test_gen = ImageDataGenerator(rescale=1./255).flow_from_directory(test_dir,\n",
        "                                                   target_size=(96,96), batch_size=624)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "33PypumK4slD",
        "colab_type": "text"
      },
      "source": [
        "### Generate Image and Label Sets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lEPzoppx4slD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Iterate through all of the images and create image-label datasets\n",
        "pretrain_images, pretrain_labels = next(train_gen)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LziLBO8k4slF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Iterate through all of the images and create image-label datasets\n",
        "preval_images, preval_labels = next(val_gen)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5CDSIp6B4slG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Iterate through all of the images and create image-label datasets\n",
        "pretest_images, pretest_labels = next(test_gen)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PoT0Sc4s4slI",
        "colab_type": "text"
      },
      "source": [
        "### Check the Shape of the Images and Labels"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u9DjAt8T4slI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print('Shape of Train Images: ', np.shape(pretrain_images))\n",
        "print('Shape of Train Labels: ', np.shape(pretrain_labels))\n",
        "print('Shape of Validation Images: ', np.shape(preval_images))\n",
        "print('Shape of Validation Labels: ', np.shape(preval_labels))\n",
        "print('Shape of Test Images: ', np.shape(pretest_images))\n",
        "print('Shape of Test Labels: ', np.shape(pretest_labels))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zBW4NymO4slJ",
        "colab_type": "text"
      },
      "source": [
        "### Transform the labels to (m X 1) matrices\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ga3Y-HgF4slK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pretrain_labels_final = np.reshape(pretrain_labels[:,0], (15198,1))\n",
        "np.shape(pretrain_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zyIecWB24slL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "preval_labels_final = np.reshape(preval_labels[:,0], (16,1))\n",
        "np.shape(preval_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qPekzsm54slM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pretest_labels_final = np.reshape(pretest_labels[:,0], (624,1))\n",
        "np.shape(pretest_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gIhSbERM4slO",
        "colab_type": "text"
      },
      "source": [
        "### Verify the Image and Label Pairs"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bFVVFHiL4slP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Select a random image to verify\n",
        "array_to_img(pretrain_images[14000])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YN4KCl_y4slQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Return the respective label and verify that the label matches the image\n",
        "pretrain_labels_final[14000, :]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WZCdbG5H4slS",
        "colab_type": "text"
      },
      "source": [
        "## Model 7: Pretrained, VGG16"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wlrVnNop4slS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Update the input shape from the default settings of the VGG16\n",
        "# model to (96, 96, 1) the input shape of the training images\n",
        "pretrain_mod1 = VGG16(include_top=False, input_shape=(96,96,3))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2X7rWv3q4slV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Review the summary of the model\n",
        "pretrain_mod1.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AlSY81GA4slW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model7 = Sequential()\n",
        "\n",
        "# Import trhe pretrained model (layers)\n",
        "model7.add(pretrain_mod1)\n",
        "\n",
        "# Add the 1D Layer\n",
        "model7.add(layers.Flatten())\n",
        "model7.add(layers.Dense(512, activation='relu'))\n",
        "model7.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Yy-GZOf4slZ",
        "colab_type": "text"
      },
      "source": [
        "### Freeze The Convolutional Base "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "LOJrkAjG4sla",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Check whether the layer is trainable (or alter its setting)\n",
        "for layer in model7.layers:\n",
        "    print(layer.name, layer.trainable)\n",
        "    \n",
        "# Check how many trainable weights are in the model\n",
        "print(len(model7.trainable_weights))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yWqwFaY64slb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Freeze the convoultional base all of the weights associated\n",
        "# with that layer(s) will remain unchanged through the optimization process\n",
        "pretrain_mod1.trainable = False"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ltLD0MBJ4slc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Do a sanity check to make sure the layers are actually frozen\n",
        "for layer in model7.layers:\n",
        "    print(layer.name, layer.trainable)\n",
        "    \n",
        "print(len(model7.trainable_weights))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WJOg1G09U4ax",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='model7_pretrain.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lYJ3Ln9c4sle",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model7.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "_DxGyWLA4slj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "results7 = model7.fit(pretrain_images, pretrain_labels_final, epochs=15, batch_size=1000, callbacks= save_model, validation_data=(preval_images, preval_labels_final))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f3H5Ox364slk",
        "colab_type": "text"
      },
      "source": [
        "### Evaluation: Model 7"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CBX0bAQl4sll",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model7.evaluate(pretrain_images, pretrain_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3NvD5MUx4slo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model7.evaluate(preval_images, preval_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FhjHcNVh4slp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(results7)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bJEcpkWB4slt",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U_vLEiwj4slt",
        "colab_type": "text"
      },
      "source": [
        "### Predictions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ru3daEp14slt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "preds7 = model7.predict(preval_images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PNn2Y2GsVvAk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pretrain_preds = preds7 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kYJ4mch-4slv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Print the classification report showing the metrics Recall, Precision, and F1-Score\n",
        "classification_report = classification_report(preval_labels_final, pretrain_preds)\n",
        "classification_report\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mvOhzDEo4slw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(preval_labels_final, pretrain_preds)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PtC6hgXh4slx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yolf38cJ4slz",
        "colab_type": "text"
      },
      "source": [
        "## Model 8: Pretrained Model, Inception - try Later"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8MQclCUA4slz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "inception_mod = InceptionV3(input_shape = (96, 96, 3), include_top = False, weights = None)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4ZpkiaRP4sl0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for layer in inception_mod.layers:\n",
        "    layer.trainable = False"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1DFCy5Fv4sl2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s2sWYf7h4sl5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c7L3-EKO4sl9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FPuet1aH4sl-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CCdURoS24smA",
        "colab_type": "text"
      },
      "source": [
        "# 5. Evaluation\n",
        "Train Images using the Test Data and the best performing model."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "biESK0x04smA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "\n",
        "best_model5 = Sequential()\n",
        "\n",
        "best_model5.add(layers.Conv2D(32, (3, 3), activation='relu', kernel_constraint=unit_norm(), input_shape=(96, 96, 3)))\n",
        "best_model5.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "best_model5.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "best_model5.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "best_model5.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "best_model5.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "\n",
        "best_model5.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "best_model5.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "best_model5.add(layers.Flatten())\n",
        "best_model5.add(layers.Dense(512, activation = 'relu'))\n",
        "best_model5.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a3iVo1c74smB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_model5.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RviUgZ8w4smC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_model5.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0wXainlskCTb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='best_model5.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E0zEA6dC4smE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_results1 = best_model5.fit(pretrain_images, pretrain_labels_final, epochs=15, batch_size=1000, validation_data=(pretest_images, pretest_labels_final))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e-6bwbZ04smG",
        "colab_type": "text"
      },
      "source": [
        "### Evaluate: Best_Model5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L1RDpxk54smG",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_model5.evaluate(pretrain_images, pretrain_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PUxrGNRw4smH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_model5.evaluate(pretest_images, pretest_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "64Xd9EB04smI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(test_results1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qfCFqhxx4smJ",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4rEJNOeJ4smJ",
        "colab_type": "text"
      },
      "source": [
        "### Predictions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DTS35FW_4smJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pred_mod5 = best_model5.predict(pretest_images)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_PPHc7bAmYSi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions_mod5 = pred_mod5 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "td6SPOtE4smK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Print the classification report showing the metrics Recall, Precision, and F1-Score\n",
        "classification_report = classification_report(pretest_labels_final, predictions_mod5)\n",
        "classification_report\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xd-ZiaDX4smL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(pretest_labels_final, predictions_mod5)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p4EeX9Cj4smM",
        "colab_type": "text"
      },
      "source": [
        "# Increasing Learning rate to 0.005 increased loss to 7.7 and decreased accuarcy to 0.5."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7xr1hiDN4smM",
        "colab_type": "text"
      },
      "source": [
        "## Add 1 additional layer with 256 units and Increase Batch size to 1500"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yGaSb4-14smM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_model51 = Sequential()\n",
        "\n",
        "best_model51.add(layers.Conv2D(32, (3, 3), activation='relu', kernel_constraint=unit_norm(), input_shape=(96, 96, 3)))\n",
        "best_model51.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "best_model51.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "best_model51.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "best_model51.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "best_model51.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "best_model51.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "best_model51.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "best_model51.add(layers.Conv2D(256, (3, 3), activation='relu'))\n",
        "best_model51.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "best_model51.add(layers.Flatten())\n",
        "best_model51.add(layers.Dense(512, activation = 'relu'))\n",
        "best_model51.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f_HhMe1n4smN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_model51.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "icyjsWWl4smO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_results2 = best_model51.fit(pretrain_images, pretrain_labels_final, epochs=22, batch_size=1500, validation_data=(pretest_images, pretest_labels_final))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GMOJVzmo4smS",
        "colab_type": "text"
      },
      "source": [
        "### Save the Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UeDAedav4smT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print('saving model to disk \\n')\n",
        "mod = './/Models/model2_testdata'\n",
        "best_model51.save(mod)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kDxCwqkO4smU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_model51.evaluate(pretrain_images, pretrain_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pbap7gPG4smW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "best_model51.evaluate(pretest_images, pretest_labels_final)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LlajzZXe4smX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(test_results2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iEYsngPf4smY",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EqC8489g4smY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pA-17YcX4smZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V1lfMC3U4sma",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NH56GXXo4smf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TIyVjFv84smg",
        "colab_type": "text"
      },
      "source": [
        "# Try Softmax output function- Yielded loss starting loss of 7.95. Stopped function early"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2RvdoLVN4smi",
        "colab_type": "text"
      },
      "source": [
        "# Try lr 0.1. Had loss of 6.95\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C7CmQBlp4smp",
        "colab_type": "text"
      },
      "source": [
        "## Prepreproessing: Part 3, Try Images size 128x128"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tRSRQJ3D4smp",
        "colab_type": "text"
      },
      "source": [
        "### Rezise all Images to 128x128"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kk_uDT2-4smp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Resize all 15,200 images in the train directory\n",
        "# Use default color mode so the image arrays have 3 channels (n x m x 3) as required for Pretrained Models\n",
        "train_gen2 = ImageDataGenerator(rescale=1./255).flow_from_directory(train_dir,\n",
        "                                                     target_size=(128,128), batch_size=15200)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bzOLnPQS4smq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "val_gen2 = ImageDataGenerator(rescale=1./255).flow_from_directory(val_dir,\n",
        "                                                     target_size=(128,128), batch_size=16)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RLHlMSlX4smr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_gen2 = ImageDataGenerator(rescale=1./255).flow_from_directory(test_dir,\n",
        "                                                     target_size=(128,128), batch_size=624)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RlgmQZUy4smv",
        "colab_type": "text"
      },
      "source": [
        "### Generate Image and Label Sets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P-cxoxnQ4smv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Iterate through all of the images and create image-label datasets\n",
        "train_images2, train_labels2 = next(train_gen2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d6bqAVLa4smw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "val_images2, val_labels2 = next(val_gen2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VWR3DWC74smz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_images2, test_labels2 = next(test_gen2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TO8G1XUo4sm0",
        "colab_type": "text"
      },
      "source": [
        "### Check the Shape of the Images and Labels"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ZIJWFry4sm1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print('Shape of Train Images: ', np.shape(train_images2))\n",
        "print('Shape of Train Labels: ', np.shape(train_labels2))\n",
        "print('Shape of Validation Images: ', np.shape(val_images2))\n",
        "print('Shape of Validation Labels: ', np.shape(val_labels2))\n",
        "print('Shape of Test Images: ', np.shape(test_images2))\n",
        "print('Shape of Test Labels: ', np.shape(test_labels2))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K8n7bCiA4sm2",
        "colab_type": "text"
      },
      "source": [
        "### Transform the labels to (m X 1) matrices\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-VF40ECL4sm3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "train_labels_final2 = np.reshape(train_labels2[:,0], (15198,1))\n",
        "np.shape(train_labels_final2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aWGSsxnu4sm3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "val_labels_final2 = np.reshape(val_labels2[:,0], (16,1))\n",
        "np.shape(val_labels_final2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ll25sai34sm4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_labels_final2 = np.reshape(test_labels2[:,0], (624,1))\n",
        "np.shape(test_labels_final2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XL6GDTzO4sm7",
        "colab_type": "text"
      },
      "source": [
        "### Verify the Image and Label Pairs\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H9kC0MQv4sm7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Select a random image to verify\n",
        "array_to_img(train_images2[15000])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_hG4T1Kg4sm8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Return the respective label and verify that the label matches the image\n",
        "train_labels_final2[15000, :]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R_JJBPtr4sm9",
        "colab_type": "text"
      },
      "source": [
        "## Model128 : 128x128 Images "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OyPKVORs4sm-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "\n",
        "model128 = Sequential()\n",
        "\n",
        "model128.add(layers.Conv2D(32, (3, 3), activation='relu', kernel_constraint=unit_norm(), input_shape=(128, 128, 3)))\n",
        "model128.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model128.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "model128.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model128.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model128.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model128.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model128.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model128.add(layers.Conv2D(256, (3, 3), activation='relu'))\n",
        "model128.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "model128.add(layers.Flatten())\n",
        "model128.add(layers.Dense(512, activation = 'relu'))\n",
        "model128.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "TcxgDX0M4sm_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model128.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BhoN_CMY4snA",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model128.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zq8z7vh5oEVT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='model128_px.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": false,
        "id": "j6skB6UJ4snC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_results3 = model128.fit(train_images2, train_labels_final2, epochs=15, batch_size=1500, callbacks=save_model, validation_data=(test_images2, test_labels_final2))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xh87Nn9Q4snE",
        "colab_type": "text"
      },
      "source": [
        "### Evaluate: Model128"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oYBstxnc4snE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model128.evaluate(train_images2, train_labels_final2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7JeFF-hV4snH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model128.evaluate(test_images2, test_labels_final2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kc_HVvMA4snM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "visualize_training_results(test_results3)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AnWo4a2F4snO",
        "colab_type": "text"
      },
      "source": [
        "**Observations:**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0LCx63lV4snO",
        "colab_type": "text"
      },
      "source": [
        "### Predictions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SlVt6a8q4snP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "pred128 = model128.predict(test_images2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4_rtRJWm4snP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "predictions128 = pred128 > 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j2X1PqOe4snQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "classification_report = classification_report(test_labels_final2, predictions128)\n",
        "classification_report"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E3X3LCAw4snR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "plot_confusion_matrix(test_labels_final2, predictions128)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GcLh-3t44snR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wE_dDlDM4snS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8nTBjphu4snS",
        "colab_type": "text"
      },
      "source": [
        "## Try dropout + unit norm + 128"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gCqGd_y_4snS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "random.seed(123)\n",
        "\n",
        "model128_drop = Sequential()\n",
        "\n",
        "model128_drop.add(layers.Conv2D(32, (3, 3), activation='relu', kernel_constraint=unit_norm(), input_shape=(128, 128, 3)))\n",
        "model128_drop.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model128_drop.add(layers.Conv2D(64, (4, 4), activation='relu'))\n",
        "model128_drop.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "model128_drop.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model128_drop.add(layers.MaxPooling2D((2,2)))\n",
        "model128_drop.add(Dropout(0.4))\n",
        "\n",
        "model128_drop.add(layers.Conv2D(128, (3, 3), activation='relu'))\n",
        "model128_drop.add(layers.MaxPooling2D((2,2)))\n",
        "\n",
        "model128_drop.add(layers.Conv2D(256, (3, 3), activation='relu'))\n",
        "model128_drop.add(layers.MaxPooling2D((2,2)))\n",
        "model128_drop.add(Dropout(0.4))\n",
        "\n",
        "# Flattening- Convert 2D matrix to a 1D vector\n",
        "model128_drop.add(layers.Flatten())\n",
        "model128_drop.add(layers.Dense(512, activation = 'relu'))\n",
        "model128_drop.add(Dense(60, input_dim=60, activation='relu', kernel_constraint=maxnorm(3)))\n",
        "model128_drop.add(Dropout(0.2))\n",
        "model128_drop.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v0pic5ev4snT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model128_drop.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9XMG7U3w4snU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "model128_drop.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wA7DEezYqRPq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "save_model = ModelCheckpoint(filepath='model128_drop.h5', monitor='val_accuracy', save_best_only=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sql7MFCj4snV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "test_results4 = model128_drop.fit(train_images2, train_labels_final2, epochs=15, batch_size=1500, callbacks=save_model, validation_data=(test_images2, test_labels_final2))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OhhzO9sF4snW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1hH_-qUs4snW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}